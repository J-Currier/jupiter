{"version":3,"sources":["images/arrow-curved-blue.svg","images/kuba_arrow_button_set_3.svg","images/kuba_arrow_button_set_1.svg","images/kuba_arrow_button_set_2.svg","images/kuba_arrow_button_set_4.svg","components/gridComp.js","components/SideboardComp.js","components/circleComp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Grid","useEffect","canvas","document","getElementById","context","getContext","width","height","bw","bh","x","lineWidth","moveTo","lineTo","y","strokeStyle","stroke","drawBoard","beginPath","className","id","Sideboard","props","useState","setStep","HandleClick","e","buttonInfo","target","name","fx","up","icon","IconUp","buttonFunction","left","IconLeft","right","IconRight","down","IconDown","undo","IconUndo","redo","buttons","index","push","onClick","key","src","type","min","max","onChange","factorHandle","value","moveFactor","autoFocus","Circle","circleInfo","centerX","centerY","radius","fillColour","borderColour","borderWidth","shapeClassName","borderColor","clearRect","arc","Math","PI","fillStyle","fill","drawCircle","EndPtCircle","endPtX","endPtY","App","getRandomNumber","newPosition","floor","random","getRandomEnd","axis","newPositon","setCenterX","setCenterY","setShapeClassName","setMoveFactor","changeClass","newName","handleClick","deltaX","deltaY","a","async","newCenterY","newCenterX","setTimeout","moveCircle","LevelCheck","newX","newY","endPtInfo","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2352933.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow-curved-blue.8c03b2bc.svg\";","module.exports = __webpack_public_path__ + \"static/media/kuba_arrow_button_set_3.8dd73829.svg\";","module.exports = __webpack_public_path__ + \"static/media/kuba_arrow_button_set_1.ba5217d3.svg\";","module.exports = __webpack_public_path__ + \"static/media/kuba_arrow_button_set_2.ef649afe.svg\";","module.exports = __webpack_public_path__ + \"static/media/kuba_arrow_button_set_4.2659d3c4.svg\";","import React, { useEffect } from 'react';\nimport './gridComp.css';\n\nfunction Grid() {\n    useEffect(() => {\n        var canvas = document.getElementById(\"myGrid\");\n        var context = canvas.getContext(\"2d\");\n        canvas.width = 2000;\n        canvas.height = 2000;\n        var bw = canvas.width;\n        var bh = canvas.height;\n\n        function drawBoard(){\n            for (var x = 0; x <= bw; x += 100) {\n                context.lineWidth = 8;\n                context.moveTo(x, 0);\n                context.lineTo(x, bh);\n            }\n\n            for (var y = 0; y <= bh; y += 100) {\n                context.moveTo(0, y);\n                context.lineTo(bw, y);\n            }\n            context.strokeStyle = \"black\" ;\n            context.stroke();\n        }\n\n        function drawAxis(){\n                context.beginPath();\n                context.strokeStyle = 'red';\n                context.lineWidth = 10;\n                context.moveTo(1000, 0);\n                context.lineTo(1000, 2000);\n                context.stroke();\n\n                context.beginPath();\n                context.strokeStyle = 'red';\n                context.lineWidth = 10;\n                context.moveTo(0, 1000);\n                context.lineTo(2000, 1000);\n                context.stroke();\n        }\n        \n        drawBoard();    \n        drawAxis();   \n    }, []);\n    return (\n      <div className=\"grid\">\n          <canvas id=\"myGrid\"></canvas>\n      </div>\n    );\n}\n\n\n\nexport {Grid}","import React, {useState} from 'react';\n\n// import { ReactComponent as IconUp } from './images/kuba_arrow_button_set_3.svg'\n// import { ReactComponent as IconLeft } from './images/kuba_arrow_button_set_1.svg'\n// import { ReactComponent as IconRight } from './images/kuba_arrow_button_set_2.svg'\n// import { ReactComponent as IconDown } from './images/kuba_arrow_button_set_4.svg'\nimport IconUp from '../images/kuba_arrow_button_set_3.svg'\nimport IconLeft from '../images/kuba_arrow_button_set_1.svg'\nimport IconRight from '../images/kuba_arrow_button_set_2.svg'\nimport IconDown from '../images/kuba_arrow_button_set_4.svg'\nimport IconUndo from '../images/arrow-curved-blue.svg'\nimport './Sideboard.css'\n\nfunction Sideboard(props) {\n\n    const [step, setStep] = useState(0); // todo\n\n    function HandleClick(e) {\n        buttonInfo[e.target.name].fx(e)\n    };\n    const buttonInfo = {\n        up: {icon: IconUp, fx: (e)=>{props.buttonFunction(e, 0, -100)}},\n        left: {icon: IconLeft, fx: (e)=>{props.buttonFunction(e, -100, 0)}},\n        right: {icon: IconRight, fx: (e)=>{props.buttonFunction(e, 100, 0)}},\n        down: {icon: IconDown, fx: (e)=>{props.buttonFunction(e, 0, 100)}},\n        undo: {icon: IconUndo, fx: setStep},\n        redo: {icon: IconUndo, fx: setStep}\n    };\n\n    const buttons = [];\n    for(let index in buttonInfo) {\n        if (index===\"up\" || index===\"down\" || index===\"left\" || index===\"right\") {\n            buttons.push(\n                <img \n                    onClick={HandleClick} \n                    key={index} \n                    name={index} \n                    id={index}\n                    className=\"directional button\" \n                    src= {buttonInfo[index].icon}\n                ></img>\n            );\n        };\n    };\n\n    // const timeButtons = [];\n    // for(let index in buttonInfo) {\n    //     if (index===\"undo\" || index===\"redo\") {\n    //         timeButtons.push(\n    //             <img \n    //                 onClick={HandleClick} \n    //                 key={index} \n    //                 name={index}\n    //                 id={index} \n    //                 className=\"time button\" \n    //                 src= {buttonInfo[index].icon}\n    //             ></img>\n    //         );\n    //     };\n    // };\n\n    \n    function Factor(props) {\n        return(\n            <input \n                type=\"number\" \n                min='0' \n                max='18' \n                onChange={props.factorHandle} \n                value={props.moveFactor} \n                id=\"factorBox\"\n                key=\"factorKey\"\n                autoFocus= {true}\n            />\n        )\n    }\n    return (\n        <div id=\"sideboard\">   \n            <Factor key='FactorKey'\n                moveFactor={props.moveFactor}\n                factorHandle={props.factorHandle}\n            />\n            {buttons}\n            {/* {timeButtons} */}\n        </div>\n    )\n}\n\nexport default Sideboard;","import React, { useEffect } from 'react';\nimport './circleComp.css';\n\nfunction Circle(props) {\n    let {centerX, centerY, radius, fillColour, borderColour, borderWidth, shapeClassName} = props.circleInfo\n    useEffect(() => {\n        var canvas = document.getElementById(\"myCircle\");\n        var context = canvas.getContext(\"2d\");\n        canvas.width = 2000;\n        canvas.height = 2000;\n\n        function drawCircle(centerX, centerY, radius, fillColour, borderColor, borderWidth) {\n            context.clearRect(0, 0, canvas.width, canvas.height)\n            context.beginPath();\n            context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n            context.fillStyle = fillColour;\n            context.fill();\n            context.lineWidth = borderWidth;\n            context.strokeStyle = borderColour;\n            context.stroke();\n        }\n        \n        drawCircle(centerX, centerY, radius, fillColour, borderColour, borderWidth); \n    });\n\n    return (\n      <div className={shapeClassName}>\n          <canvas id=\"myCircle\"></canvas>\n      </div>\n    );\n}\n\nfunction EndPtCircle(props) {\n    let {endPtX, endPtY, radius, fillColour, borderColour, borderWidth} = props.circleInfo\n    useEffect(() => {\n        var canvas = document.getElementById(\"myEndPt\");\n        var context = canvas.getContext(\"2d\");\n        canvas.width = 2000;\n        canvas.height = 2000;\n\n        function drawCircle(endPtX, endPtY, radius, fillColour, borderColor, borderWidth) {\n            context.clearRect(0, 0, canvas.width, canvas.height)\n            context.beginPath();\n            context.arc(endPtX, endPtY, radius, 0, 2 * Math.PI, false);\n            context.fillStyle = fillColour;\n            context.fill();\n            context.lineWidth = borderWidth;\n            context.strokeStyle = borderColour;\n            context.stroke();\n        }\n        \n        drawCircle(endPtX, endPtY, radius, fillColour, borderColour, borderWidth); \n    });\n\n    return (\n      <div >\n          <canvas id=\"myEndPt\"></canvas>\n      </div>\n    );\n}\n\nexport {Circle, EndPtCircle}","import React, { useState } from 'react';\nimport './App.css';\nimport { Grid } from './components/gridComp'\nimport Sideboard from './components/SideboardComp'\nimport { Circle, EndPtCircle } from './components/circleComp.js'\n\n\nfunction App() {\n\n  const getRandomNumber = () => {\n    let newPosition = (Math.floor(Math.random()*10))*200\n\n    if (newPosition == 0 || newPosition == 2000) {\n      newPosition = 300;\n    }\n    return newPosition\n  }\n\n  const getRandomEnd = (axis) => {\n    let newPositon = getRandomNumber();\n    while (newPositon == axis){\n      newPositon= getRandomNumber()\n    }\n    return newPositon;\n  }\n\n  const [centerX, setCenterX] = useState(getRandomNumber())\n  const [centerY, setCenterY] = useState(getRandomNumber())\n  const [radius, setRadius] = useState(50)\n  const [fillColour, setFillColour] = useState('rgba(137, 235, 52, 1)')\n  const [borderColour, setBorderColour] = useState('rgba(0, 0, 0, 1)')\n  const [borderWidth, setBorderWidth] = useState(10)\n  const [shapeClassName, setShapeClassName] = useState('Circle')\n\n  const [endPtX, setEndPtX] = useState(getRandomEnd(centerX))\n  const [endPtY, setEndPtY] = useState(getRandomEnd(centerY))\n  const [moveFactor, setMoveFactor] = useState(1)\n  const [gameDiv, setGameDiv] = useState('wrapper')\n\n  const changeClass = (newName) => {\n    setShapeClassName(newName)\n  }\n\n  const handleClick = async (e, deltaX, deltaY) => {\n    let newCenterX = (deltaX*moveFactor) + centerX;\n    let newCenterY = (deltaY*moveFactor) + centerY;\n    if (newCenterX < 100 || newCenterX > 1900) {\n      changeClass('shake-vertical');\n      newCenterX = centerX;\n      setTimeout(() => {\n        changeClass(\"Circle\")\n        }, 500);\n    } else if (newCenterY < 100 || newCenterY > 1900) {\n      changeClass('shake-horizontal');\n      newCenterY = centerY;\n      setTimeout(() => {\n        changeClass(\"Circle\")\n        }, 500);\n    } else {\n    await changeClass(\"fade-out\")\n    await setTimeout(() => {\n\n      moveCircle(newCenterX, newCenterY); \n      changeClass(\"fade-in\")\n    }, 100);\n    }\n  }\n\n  function factorHandle(e) {\n    setMoveFactor(e.target.value)\n    \n}\n\n  const Game = (props) => {\n    return (\n      <main>\n        <div className='wrapper'>\n          <Grid />\n          <EndPtCircle circleInfo={endPtInfo} />\n          <Circle circleInfo={circleInfo}\n           />\n        </div>\n        <Sideboard\n          buttonFunction={handleClick}\n          factorHandle={factorHandle}\n          moveFactor={moveFactor}\n\n          key='sideboard' />\n        <LevelCheck key='levelCHeck'/>\n      </main>\n    )\n  }\n  const LevelCheck = () => {\n\n    \n    if ((centerX == endPtX) && (centerY == endPtY)) {\n      return (\n        <div className='winner'>\n          Portal Locked! <br />\n          You Win\n        </div>\n      )\n    } else {\n      return (\n        <div></div>\n      )\n    }\n  }\n\n  const moveCircle = (newX, newY) => {\n    setCenterX(newX)\n    setCenterY(newY)\n  }\n  let circleInfo = {\n    \"centerX\": centerX,\n    \"centerY\": centerY,\n    \"radius\": radius,\n    \"fillColour\": fillColour,\n    \"borderColour\": borderColour,\n    \"borderWidth\": borderWidth,\n    \"shapeClassName\": shapeClassName\n  }\n\n  let endPtInfo = {\n    \"endPtX\": endPtX,\n    \"endPtY\": endPtY,\n    \"radius\": radius,\n    \"fillColour\": 'rgba(255, 77, 0, 1)',\n    \"borderColour\": borderColour,\n    \"borderWidth\": borderWidth,\n    \"shapeClassName\": \"endPtCircle\"\n  }\n\n\n  return (\n    <div className=\"App\">\n      {/* <header>\n        Graph Hopper\n      </header> */}\n      <Game key='Game' />\n\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App key=\"app\"/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}